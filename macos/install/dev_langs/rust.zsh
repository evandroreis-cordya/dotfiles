#!/usr/bin/env zsh

# Get the directory of the current script
SCRIPT_DIR=${0:a:h}
source "${SCRIPT_DIR}/../../../utils.zsh"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add warning function if not already defined
print_warning() {
    print_in_yellow "  [!] $1
"
}

print_in_purple "
   Rust Development Tools

"

# Install Rust using rustup
if ! command -v rustup &> /dev/null; then
    print_in_purple "
   Installing Rust

"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &> /dev/null
    print_result $? "Rustup"

    # Source cargo environment
    source "$HOME/.cargo/env"
else
    print_success "Rustup (already installed)"
fi

# Create modular configuration file for Rust
create_rust_config() {
    local config_dir="$HOME/dotfiles/macos/configs/shell/zsh_configs"
    local config_file="$config_dir/rust.zsh"

    # Create directory if it doesn't exist
    mkdir -p "$config_dir"

    # Create Rust configuration file
    cat > "$config_file" << 'EOL'
#!/bin/zsh
#
# Rust configuration for zsh
# This file contains all Rust-related configurations
#

# Rust environment variables
export RUSTUP_HOME="$HOME/.rustup"
export CARGO_HOME="$HOME/.cargo"
export PATH="$CARGO_HOME/bin:$PATH"

# Rust aliases
alias rustc-version="rustc --version"
alias cargo-version="cargo --version"
alias rustup-version="rustup --version"
alias cargo-update="cargo install-update -a"
alias cargo-clean="cargo clean"
alias cargo-doc="cargo doc --open"
alias cargo-audit="cargo audit"
alias cargo-outdated="cargo outdated"

# Rust project creation function
new-rust() {
    if [ $# -lt 1 ]; then
        echo "Usage: new-rust <project-name> [--lib]"
        return 1
    fi

    local project_name=$1
    local project_type="--bin"

    if [[ "$2" == "--lib" ]]; then
        project_type="--lib"
    fi

    # Create new Rust project
    cargo new "$project_name" $project_type

    # Navigate to project directory
    cd "$project_name" || return

    # Add useful dependencies to Cargo.toml
    cat >> Cargo.toml << EOF

# Development dependencies
[dev-dependencies]
criterion = "0.5"  # Benchmarking
pretty_assertions = "1.4"  # Better test assertions

# Common dependencies (uncomment as needed)
# serde = { version = "1.0", features = ["derive"] }
# serde_json = "1.0"
# tokio = { version = "1.36", features = ["full"] }
# clap = { version = "4.5", features = ["derive"] }
# anyhow = "1.0"
# thiserror = "1.0"
# log = "0.4"
# env_logger = "0.11"
EOF

    # Create .gitignore
    cat > .gitignore << EOF
# Generated by Cargo
/target/
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# IDE files
.idea/
.vscode/
*.iml

# macOS files
.DS_Store
EOF

    # Initialize git repository if git is available
    if command -v git >/dev/null 2>&1; then
        git init
        git add .
        git commit -m "Initial commit"
    fi

    echo "Rust project '$project_name' created successfully!"
}
EOL

    print_result $? "Created Rust configuration file"
}

# Install Rust tools
print_in_purple "
   Installing Rust Tools

"

# Install essential Rust tools
cargo_install() {
    declare -r PACKAGE="$1"
    declare -r PACKAGE_READABLE_NAME="$2"

    if command -v "$PACKAGE" &> /dev/null; then
        print_success "$PACKAGE_READABLE_NAME"
    else
        execute "cargo install $PACKAGE" "$PACKAGE_READABLE_NAME"
    fi
}

cargo_install "cargo-update" "cargo-update"
cargo_install "cargo-edit" "cargo-edit"
cargo_install "cargo-watch" "cargo-watch"
cargo_install "cargo-generate" "cargo-generate"
cargo_install "cargo-outdated" "cargo-outdated"
cargo_install "cargo-audit" "cargo-audit"
cargo_install "cargo-expand" "cargo-expand"
cargo_install "cargo-tarpaulin" "cargo-tarpaulin"
cargo_install "cargo-deny" "cargo-deny"
cargo_install "cargo-license" "cargo-license"
cargo_install "cargo-bloat" "cargo-bloat"
cargo_install "cargo-criterion" "cargo-criterion"
cargo_install "cargo-udeps" "cargo-udeps"
cargo_install "cargo-nextest" "cargo-nextest"
cargo_install "cargo-llvm-lines" "cargo-llvm-lines"
cargo_install "cargo-flamegraph" "cargo-flamegraph"
cargo_install "cargo-insta" "cargo-insta"
cargo_install "cargo-modules" "cargo-modules"
cargo_install "cargo-readme" "cargo-readme"
cargo_install "cargo-hack" "cargo-hack"
cargo_install "cargo-sweep" "cargo-sweep"
cargo_install "cargo-cache" "cargo-cache"
cargo_install "cargo-release" "cargo-release"
cargo_install "cargo-fuzz" "cargo-fuzz"
cargo_install "cargo-workspaces" "cargo-workspaces"
cargo_install "cargo-make" "cargo-make"
cargo_install "cargo-spellcheck" "cargo-spellcheck"
cargo_install "cargo-sort" "cargo-sort"

# Create modular configuration
create_rust_config

# Load Rust configuration
source "$HOME/dotfiles/macos/configs/shell/zsh_configs/rust.zsh"
EOL
    print_result $? "Added Rust configuration to .zshrc"
fi

print_in_green "
  Rust development environment setup complete!
"
